# generated by fastapi-codegen:
#   filename:  ../../stanford-policylab/bc2/app/server/schema/openapi.yaml
#   timestamp: 2024-05-14T23:42:14+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, Field, RootModel
from typing_extensions import Literal


class Error(BaseModel):
    message: str


class AttachmentType(Enum):
    LINK = 'LINK'


class DocumentLink(BaseModel):
    attachmentType: Literal['LINK']
    documentId: str
    url: Optional[AnyUrl] = None


class AttachmentType1(Enum):
    TEXT = 'TEXT'


class DocumentText(BaseModel):
    attachmentType: Literal['TEXT']
    documentId: str
    content: str


class BlindReviewInfo(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    blindReviewRequired: bool
    redactedDocuments: List[DocumentLink]


class Status(Enum):
    COMPLETE = 'COMPLETE'


class RedactionResultSuccess(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    inputDocument: DocumentLink
    redactedDocument: DocumentLink
    status: Literal['COMPLETE']


class Status1(Enum):
    ERROR = 'ERROR'


class RedactionResultError(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    inputDocument: DocumentLink
    error: str
    status: Literal['ERROR']


class Status2(Enum):
    QUEUED = 'QUEUED'
    PROCESSING = 'PROCESSING'


class RedactionResultPending(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    inputDocument: DocumentLink
    status: Literal['QUEUED', 'PROCESSING']


class RedactionResult(
    RootModel[
        Union[RedactionResultSuccess, RedactionResultError, RedactionResultPending]
    ]
):
    root: Union[
        RedactionResultSuccess, RedactionResultError, RedactionResultPending
    ] = Field(..., discriminator='status')


class RedactionStatus(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    requests: List[RedactionResult]


class RedactionRequest(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    document: Union[DocumentLink, DocumentText] = Field(
        ..., discriminator='attachmentType'
    )
    callbackUrl: AnyUrl


class ReviewTimestamps(BaseModel):
    pageOpen: AwareDatetime
    decision: AwareDatetime


class ChargingDecision(Enum):
    CHARGE_LIKELY = 'CHARGE_LIKELY'
    CHARGE_MAYBE = 'CHARGE_MAYBE'
    DECLINE_MAYBE = 'DECLINE_MAYBE'
    DECLINE_LIKELY = 'DECLINE_LIKELY'


class ChargeOutcome(BaseModel):
    chargingDecision: ChargingDecision = Field(..., examples=['CHARGE_LIKELY'])
    chargingDecisionExplanation: str = Field(
        ..., examples=['The defendant was caught on camera with the stolen goods.']
    )
    additionalEvidence: Optional[str] = Field(
        None, examples=['The defendant has a history of theft.']
    )
    outcomeType: Literal['CHARGE']


class OutcomeType(Enum):
    DISQUALIFY = 'DISQUALIFY'


class DisqualifyingReason(Enum):
    ASSIGNED_TO_UNBLIND = 'ASSIGNED_TO_UNBLIND'
    CASE_TYPE_INELIGIBLE = 'CASE_TYPE_INELIGIBLE'
    PRIOR_KNOWLEDGE_BIAS = 'PRIOR_KNOWLEDGE_BIAS'
    NARRATIVE_INCOMPLETE = 'NARRATIVE_INCOMPLETE'
    REDACTION_MISSING = 'REDACTION_MISSING'
    REDACTION_ILLEGIBLE = 'REDACTION_ILLEGIBLE'
    OTHER = 'OTHER'


class DisqualifyOutcome(BaseModel):
    outcomeType: Literal['DISQUALIFY'] = Field(..., examples=['DISQUALIFY'])
    disqualifyingReason: DisqualifyingReason = Field(
        ..., examples=['CASE_TYPE_INELIGIBLE']
    )
    disqualifyingReasonExplanation: Optional[str] = Field(
        None,
        examples=['I have prior knowledge of the individuals involved in this case.'],
    )


class ReviewProtocol(Enum):
    BLIND_REVIEW = 'BLIND_REVIEW'
    FINAL_REVIEW = 'FINAL_REVIEW'


class Protocol(Enum):
    BLIND_REVIEW = 'BLIND_REVIEW'


class BlindReviewDecision(BaseModel):
    protocol: Literal['BLIND_REVIEW'] = Field(..., examples=['BLIND_REVIEW'])
    outcome: Union[ChargeOutcome, DisqualifyOutcome] = Field(
        ..., discriminator='outcomeType'
    )


class Protocol1(Enum):
    FINAL_REVIEW = 'FINAL_REVIEW'


class FinalReviewDecision(BaseModel):
    protocol: Literal['FINAL_REVIEW'] = Field(..., examples=['FINAL_REVIEW'])
    outcome: ChargeOutcome


class ReviewDecision(RootModel[Union[BlindReviewDecision, FinalReviewDecision]]):
    root: Union[BlindReviewDecision, FinalReviewDecision] = Field(
        ..., discriminator='protocol'
    )


class Exposure(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    reviewingAttorneyUserId: str
    documentIds: List[str] = Field(..., min_length=1)
    protocol: ReviewProtocol


class Review(BaseModel):
    jurisdictionId: str
    caseId: str
    defendantId: str
    reviewingAttorneyUserId: str
    documentIds: List[str] = Field(..., min_length=1)
    decision: ReviewDecision
    timestamps: ReviewTimestamps
