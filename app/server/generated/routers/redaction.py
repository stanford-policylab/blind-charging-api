# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-06-11T03:31:24+00:00

from __future__ import annotations

from fastapi import APIRouter, Request

from ..dependencies import *
from ..handlers import redaction_handler

router = APIRouter(tags=['redaction'])


# Callbacks for redact_document, supplied here for documentation.
# See https://fastapi.tiangolo.com/advanced/openapi-callbacks/
_cb_router_redact_document = APIRouter()


@_cb_router_redact_document.post('{$request.body#/callbackUrl}', response_model=None)
def post_redaction_complete_0(body: RedactionResultCompleted) -> None:
    """Redaction complete

    This callback is made for each input document when it is finished.
    """
    pass


@router.post(
    '/redact',
    response_model=None,
    tags=['redaction'],
    callbacks=_cb_router_redact_document.routes,
)
async def redact_document(request: Request, body: RedactionRequest) -> None:
    """Redact a document

    Submit a document for redaction. Redaction happens asynchronously and may take some time.
    When finished, the redacted document will be posted to the provided callback URL.

    A callback will be POSTed to the provided URL when the redaction process is completed for each input document.
    The callback will contain either `RedactionResultSuccess` or `RedactionResultError`.
    """
    return await redaction_handler.redact_document(**locals())


@router.get(
    '/redact/{jurisdictionId}/{caseId}',
    response_model=RedactionStatus,
    tags=['redaction'],
)
async def get_redaction_status(
    request: Request,
    jurisdiction_id: str = Path(..., alias='jurisdictionId'),
    case_id: str = Path(..., alias='caseId'),
    accused_id: Optional[str] = Query(None, alias='accusedId'),
) -> RedactionStatus:
    """Get status of document redaction for a case.

    Get the status of redaction for all documents in a case.
    This will return a list of document IDs and their redaction status.

    Generally, the push mechanism provided by the callback URL passed to the `/redact` endpoint should be used to determine when the redaction process is completed.
    However, this endpoint can be used to poll for the status of redaction if necessary.
    """
    return await redaction_handler.get_redaction_status(**locals())
