# generated by fastapi-codegen:
#   filename:  api.yaml
#   timestamp: 2024-05-09T02:33:54+00:00

# mypy: disable-error-code="name-defined"

import importlib
import logging
from typing import Callable

from fastapi import HTTPException, status

logger = logging.getLogger(__name__)


def _get_default_handler(slug: str):
    # Raise a 501 error for "Not Implemented"
    def _handler(*args, **kwargs):
        raise HTTPException(
            status_code=status.HTTP_501_NOT_IMPLEMENTED,
            detail=f'Handler {slug} not implemented',
        )

    return _handler


class _VHandler:
    def __init__(self, tag: str):
        self.tag = tag
        self.module = None
        self._handlers: dict[str, Callable] = {}
        try:
            logger.debug(f'Importing module for tag {self.tag}')
            self.module = importlib.import_module(
                f'.handlers.{self.tag}', package='app.server'
            )
        except ModuleNotFoundError:
            logger.warning(f'No module found for tag {self.tag}!')

    def __getattr__(self, item: str):
        # Try to dynamically import the handler
        if item not in self._handlers:
            handler = self._get_handler(item)
            if not handler:
                slug = f"{self.tag}.{item}"
                logger.warning(f'No handler found for {slug}')
                # Don't cache default handler
                return _get_default_handler(slug)
            self._handlers[item] = handler
        return self._handlers[item]

    def _get_handler(self, item):
        return getattr(self.module, item, None)


bookkeeping_handler = _VHandler('bookkeeping')
redaction_handler = _VHandler('redaction')
workflow_handler = _VHandler('workflow')
